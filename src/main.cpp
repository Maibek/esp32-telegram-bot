#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <Adafruit_HTU21DF.h>
#include <Wire.h>

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
#include "wifi_data.h"
#include "token_bot.h"

const unsigned long BOT_MTBS = 1000;
const int LED_PIN = 2; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –í –±—É–¥—É—â–µ–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ.
const int SDA0_PIN = 18;
const int SCL0_PIN = 19;
const int SDA1_PIN = 22;
const int SCL1_PIN = 23;

extern TwoWire Wire;
extern TwoWire Wire1;

Adafruit_HTU21DF sensor0;
Adafruit_HTU21DF sensor1;
WiFiClientSecure client;
UniversalTelegramBot bot(TOKEN_BOT, client);
unsigned long bot_lasttime = 0;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞
float last_temp0 = NAN;
float last_hum0 = NAN;
float last_temp1 = NAN;
float last_hum1 = NAN;
unsigned long last_sensor_read = 0;

void sendMainMenu(String chat_id);
void sendStatus(String chat_id);

void connectToWiFi() {
  Serial.println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi...");
  WiFi.disconnect(true);
  delay(1000);
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  WiFi.setSleep(false); // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è WiFi
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    attempts++;
    
    if (attempts > 30) {
      Serial.println("\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
      delay(2000);
      ESP.restart();
    }
  }
  
  Serial.println("\n–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–æ—á–∫–µ –¥–æ—Å—Ç—É–ø–∞ ");
  Serial.println(WIFI_SSID);
  Serial.print("IP –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.localIP());

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è SSL. –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –±–µ–∑ –Ω–µ–≥–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—É–º–∞—Ç—å. –ò–Ω–æ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
  configTime(0, 0, "pool.ntp.org");
  Serial.println("–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏...");
  time_t now = time(nullptr);
  while (now < 24 * 3600) {
    delay(500);
    Serial.print(".");
    now = time(nullptr);
  }
  Serial.println("\n–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!");
}

void safe_sensor_read() {
  if (millis() - last_sensor_read > 5000) {
    // –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
    float t0 = sensor0.readTemperature();
    float h0 = sensor0.readHumidity();
    
    // –ß—Ç–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
    float t1 = sensor1.readTemperature();
    float h1 = sensor1.readHumidity();
    
    Serial.print("–î–∞—Ç—á–∏–∫ 0: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = ");
    Serial.print(t0);
    Serial.print(", –í–ª–∞–∂–Ω–æ—Å—Ç—å = ");
    Serial.println(h0);
    
    Serial.print("–î–∞—Ç—á–∏–∫ 1: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = ");
    Serial.print(t1);
    Serial.print(", –í–ª–∞–∂–Ω–æ—Å—Ç—å = ");
    Serial.println(h1);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (!isnan(t0)) last_temp0 = t0;
    if (!isnan(h0)) last_hum0 = h0;
    if (!isnan(t1)) last_temp1 = t1;
    if (!isnan(h1)) last_hum1 = h1;
    
    last_sensor_read = millis();
  }
}

void sendMainMenu(String chat_id) {
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
  String keyboardJson = R"([
    [{"text": "üêú –î–∞–Ω–Ω—ã–µ Structor", "callback_data": "/meteo_structor"}],
    [{"text": "üêú –î–∞–Ω–Ω—ã–µ Nicobarensis", "callback_data": "/meteo_nicobarensis"}],
    [{"text": "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "callback_data": "/status"}, {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "/update"}]
  ])";
  
  bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", "", keyboardJson);
}

void sendStatus(String chat_id) {
  String status = "üñ•Ô∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n";
  status += "–°–∏–≥–Ω–∞–ª: " + String(WiFi.RSSI()) + " dBm\n";
  status += "–ü–∞–º—è—Ç—å: " + String(ESP.getFreeHeap() / 1024.0, 1) + " KB —Å–≤–æ–±–æ–¥–Ω–æ\n";
  status += "–ê–ø—Ç–∞–π–º: " + String(millis() / 1000 / 60) + " –º–∏–Ω—É—Ç\n";
  status += "üêú *–ö–ª–∏–º–∞—Ç —É Structor*\n";
  status += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(last_temp0, 2) + " ¬∞C\n";
  status += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(last_hum0, 2) + " %\n";
  status += "üêú *–ö–ª–∏–º–∞—Ç —É Nicobarensis*\n";      
  status += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(last_temp1, 2) + " ¬∞C\n";
  status += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(last_hum1, 2) + " %";
  
  bot.sendMessage(chat_id, status, "Markdown");
}


void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    Serial.print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ");
    Serial.print(from_name);
    Serial.print(" (");
    Serial.print(chat_id);
    Serial.print("): ");
    Serial.println(text);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text == "/start") {
      String welcome = "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!\n";
      welcome += "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–∫—Ä–æ–∫–ª–∏–º–∞—Ç–∞.\n";
      welcome += "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.";
      bot.sendMessage(chat_id, welcome);
      sendMainMenu(chat_id);
      continue;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ callback –ø—Ä–µ—Ñ–∏–∫—Å–∞)
    if (text.equalsIgnoreCase("/meteo_structor")) {
      String message = "üêú *–ö–ª–∏–º–∞—Ç —É Structor*\n";      
      if (!isnan(last_temp0)) message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(last_temp0, 2) + " ¬∞C\n";
      if (!isnan(last_hum0)) message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(last_hum0, 2) + " %";
      bot.sendMessage(chat_id, message, "Markdown");
    }
    else if (text.equalsIgnoreCase("/meteo_nicobarensis")) {
      String message = "üêú *–ö–ª–∏–º–∞—Ç —É Nicobarensis*\n";      
      if (!isnan(last_temp1)) message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(last_temp1, 2) + " ¬∞C\n";
      if (!isnan(last_hum1)) message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(last_hum1, 2) + " %";
      bot.sendMessage(chat_id, message, "Markdown");
    }
    else if (text.equalsIgnoreCase("/status")) {
      sendStatus(chat_id);
    }
    else if (text.equalsIgnoreCase("/update")) {
      bot.sendMessage(chat_id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
      sendMainMenu(chat_id);
    }
    else if (text.equalsIgnoreCase("/help")) {
      sendMainMenu(chat_id);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    else if (text.startsWith("/cb")) {
      String command = text.substring(3); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /cb
      command.trim();
      
      if (command.equalsIgnoreCase("/meteo_structor")) {
        String message = "üêú *–ö–ª–∏–º–∞—Ç —É Structor*\n";      
        if (!isnan(last_temp0)) message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(last_temp0, 2) + " ¬∞C\n";
        if (!isnan(last_hum0)) message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(last_hum0, 2) + " %";
        bot.sendMessage(chat_id, message, "Markdown");
      }
      else if (command.equalsIgnoreCase("/meteo_nicobarensis")) {
        String message = "üêú *–ö–ª–∏–º–∞—Ç —É Nicobarensis*\n";      
        if (!isnan(last_temp1)) message += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(last_temp1, 2) + " ¬∞C\n";
        if (!isnan(last_hum1)) message += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(last_hum1, 2) + " %";
        bot.sendMessage(chat_id, message, "Markdown");
      }
      else if (command.equalsIgnoreCase("/status")) {
        sendStatus(chat_id);
      }
      else if (command.equalsIgnoreCase("/update")) {
        bot.sendMessage(chat_id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
        sendMainMenu(chat_id);
      }
    }
    else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      String response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + text + "\n";
      response += "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é";
      bot.sendMessage(chat_id, response);
    }
  }
}

void setup() {
  Serial.begin(115200);
  delay(2000);
  
  Wire.begin(SDA0_PIN, SCL0_PIN);
  Wire.setTimeOut(250); // –¢–∞–π–º–∞—É—Ç I2C. –ë–µ–∑ –Ω–µ–≥–æ –¥–∞—Ç—á–∏–∫ –Ω–µ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.
  
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  pinMode(LED_PIN, OUTPUT); // –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –í –±—É–¥—É—â–µ–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ.

  Wire.begin(SDA0_PIN, SCL0_PIN);
  Wire.setTimeOut(250);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π —à–∏–Ω—ã I2C
  Wire1.begin(SDA1_PIN, SCL1_PIN);
  Wire1.setTimeOut(250);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ 0 –Ω–∞ –ø–µ—Ä–≤–æ–π —à–∏–Ω–µ
  if (!sensor0.begin(&Wire)) {
    Serial.println("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTU21DF #0!");
  } else {
    Serial.println("HTU21DF #0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ 1 –Ω–∞ –≤—Ç–æ—Ä–æ–π —à–∏–Ω–µ
  if (!sensor1.begin(&Wire1)) {
    Serial.println("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTU21DF #1!");
  } else {
    Serial.println("HTU21DF #1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  connectToWiFi();
  // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –≤ –±—É–¥—É—â–µ–º —É–±—Ä–∞—Ç—å.
  digitalWrite(LED_PIN, HIGH);
  delay(1000);
  digitalWrite(LED_PIN, LOW);
}

void loop() {
  safe_sensor_read(); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WiFi
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck > 10000) {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
      WiFi.disconnect();
      WiFi.reconnect();
    }
    lastCheck = millis();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram. –í –±—É–¥—É—â–µ–º –ª—É—á—à–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å webhook. –¢–∞–∫ –∫–∞–∫ –∏–Ω–æ–≥–¥–∞ –±–æ—Ç –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ø–∞–º–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.
  if (millis() - bot_lasttime > BOT_MTBS) {
    Serial.println("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram...");
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    if (numNewMessages > 0) {
      Serial.println("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + String(numNewMessages));
      handleNewMessages(numNewMessages);
    }
    
    // –ù—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å.
    bot_lasttime = millis();
    Serial.println("–°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: " + String(ESP.getFreeHeap()));
  }
}